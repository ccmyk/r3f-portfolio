/* src/styles/animations.pcss - Text animation and WebGL-related styles */

/* Animation base classes for text splitting/writing effects */
.Awrite,
.Atext {
  position: relative;
  text-transform: uppercase;
  
  /* Intersection observer helper */
  .iO {
    position: absolute;
    left: 0;
    top: 150%;
    height: 10px;
    pointer-events: none;
  }
  
  /* Character-level styling for split text */
  .char {
    position: relative;
    pointer-events: none;
    
    /* Background block (unused in current implementation) */
    .b {
      position: absolute;
      left: 0;
      top: 0;
      background: var(--color-text-primary);
      width: 1.1rem;
      height: 1.1rem;
      display: none;
    }
    
    /* Normal character state */
    .n {
      opacity: 0;
      color: var(--color-text-primary);
    }
    
    /* Fake character overlay for typewriter effect */
    .f {
      position: absolute;
      left: 0;
      top: 0;
      opacity: 0;
      color: var(--color-text-secondary);
      z-index: 1;
      background: var(--color-text-primary);
      display: none;
      transform-origin: left center;
    }
  }
  
  /* No animation state */
  &.nono {
    color: var(--color-text-primary);
  }
}

/* Inverted style variant */
.Awrite-inv,
.Atext-inv {
  color: var(--color-text-secondary);
  padding: 2px 4px 1px;
  background: var(--color-text-primary);
  .char .n,
  &.nono {
    color: var(--color-text-secondary);
  }
}

/* Text block animation */
.Atext {
  text-transform: uppercase;
  position: relative;
  line-height: 1.27;
  pointer-events: none;
  
  a {
    pointer-events: all;
  }
  
  p + p {
    margin-top: 1.8rem;
  }
  
  .char .f {
    background: transparent;
  }
  
  .iO {
    position: absolute;
    left: 0;
    width: 1px;
    top: 150%;
    height: 10px;
  }
  
  &.stview .iO {
    top: 0%;
    height: 100%;
  }
}

/* Line-by-line animation */
.Aline {
  text-transform: uppercase;
  position: relative;
  line-height: 1.27;
  pointer-events: none;
  opacity: 0;
  
  a {
    pointer-events: all;
  }
  
  p + p {
    margin-top: 1.8rem;
  }
  
  &.stview .iO {
    top: 0%;
    height: 100%;
  }
}

/* Animated title with canvas overlay */
.Atitle {
  position: relative;
  display: inline-flex;
  justify-content: flex-start;
  
  .cCover {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
  
  .Oi {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    z-index: 1;
    opacity: 1 !important;
  }
  
  .tt1 {
    opacity: 0;
  }
  
  canvas {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    pointer-events: none;
  }
}

/* Mouse cursor animation */
.mouse {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 49;
  pointer-events: none;
  
  &_el {
    position: absolute;
    left: 2rem;
    top: -0.8rem;
    overflow: hidden;
    
    .Awrite {
      white-space: nowrap;
      
      &-w {
        --color-text-primary: #f8f6f2;
        --color-text-secondary: #000;
      }
    }
  }
}

/* WebGL and interaction utilities */
.pHide {
  position: fixed;
  pointer-events: none;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  z-index: 9999;
}

/* Development/debug helpers */
.iO,
.Oi,
.OiAlt {
  visibility: hidden;
  pointer-events: none;
}

html:not(.dev) {
  .iO,
  .Oi,
  .OiChange,
  .OiAlt {
    background: transparent !important;
  }
}

/* WebGL canvas containers */
#gl {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 20;
  pointer-events: none;
}

#glLoader {
  position: fixed;
  top: 0;
  left: 0;
  pointer-events: none;
  z-index: 32;
}

#glBg {
  position: fixed;
  top: 0;
  left: 0;
  pointer-events: none;
  z-index: 0;
}

/* Performance optimization */
.move {
  will-change: transform;
}

.canvas {
  pointer-events: none;
  position: fixed;
  left: 0;
  top: 0;
}

/* Debug/development utilities */
.checkfix {
  position: fixed;
  right: 0;
  bottom: 0;
  font-size: 12px;
  z-index: 1000;
  background: #333;
  color: #fff;
  font-family: Arial;
  padding: 12px;
  opacity: 0.1;
  
  &:hover {
    opacity: 1;
  }
}

/* Image lazy loading */
.imgP {
  opacity: 0;
  height: auto;
  transition: 0.6s opacity cubic-bezier(0.55, 0, 0.1, 1);
  
  &.Ldd {
    opacity: 1;
  }
}

/* WebGL media container */
.glMedia {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

/* Utility for fake sections (likely for scroll calculations) */
section.fake {
  height: 110vh;
}
